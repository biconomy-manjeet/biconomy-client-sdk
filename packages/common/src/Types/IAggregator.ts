/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type UserOperationStruct = {
  sender: string;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export interface IAggregatorInterface extends utils.Interface {
  contractName: "IAggregator";
  functions: {
    "aggregateSignatures(bytes[])": FunctionFragment;
    "validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": FunctionFragment;
    "validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aggregateSignatures",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignatures",
    values: [UserOperationStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOpSignature",
    values: [UserOperationStruct, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOpSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAggregator extends BaseContract {
  contractName: "IAggregator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregateSignatures(
      sigsForAggregation: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { aggregatesSignature: string }>;

    validateSignatures(
      userOps: UserOperationStruct[],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateUserOpSignature(
      userOp: UserOperationStruct,
      offChainSigCheck: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        sigForUserOp: string;
        sigForAggregation: string;
        offChainSigInfo: string;
      }
    >;
  };

  aggregateSignatures(
    sigsForAggregation: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  validateSignatures(
    userOps: UserOperationStruct[],
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  validateUserOpSignature(
    userOp: UserOperationStruct,
    offChainSigCheck: boolean,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      sigForUserOp: string;
      sigForAggregation: string;
      offChainSigInfo: string;
    }
  >;

  callStatic: {
    aggregateSignatures(
      sigsForAggregation: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    validateSignatures(
      userOps: UserOperationStruct[],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOpSignature(
      userOp: UserOperationStruct,
      offChainSigCheck: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        sigForUserOp: string;
        sigForAggregation: string;
        offChainSigInfo: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    aggregateSignatures(
      sigsForAggregation: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignatures(
      userOps: UserOperationStruct[],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateUserOpSignature(
      userOp: UserOperationStruct,
      offChainSigCheck: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregateSignatures(
      sigsForAggregation: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSignatures(
      userOps: UserOperationStruct[],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateUserOpSignature(
      userOp: UserOperationStruct,
      offChainSigCheck: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
